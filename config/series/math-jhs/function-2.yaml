sampleTex: 'y = 10/x \Rightarrow y |_{x=2} = 5'
mth:
  relationTex: '\Rightarrow'
  generators:
    z:
      expressions:
        - template: And 'y = \frac{ a }{ x }' (Equal (Restrict 'y' (Equal 'x' .a0)) .a1)
          calcs: mul .a1 .a0
          constraints:
            - var: a0
              min: -10
              max: 10
              excepts: 0
            - var: a1
              min: -10
              max: 10
              excepts: 0
        - template: Equal .b1 (Frac 'a' .b0)
          calcs: mul .b1 .b0
          wrongCals: .a0; .a1; 1; 2; 3; 4; mul -1 .a0; mul -1 .a1; mul .a0 .a1; mul -1 .a0 .a1; mul 2 .a0 .a1; mul -2 .a0 .a1; mul .a0 .a0; mul .a1 .a1; mul -1 .a0 .a0; mul -1 .a1 .a1
          constraints:
            - var: b0
              cal: .a0
              excepts: 0
            - var: b1
              cal: .a1
              excepts: 0
        - template: Equal 'a' (Times .c1 .c0)
          calcs: mul .c1 .c0
          wrongCals: .b0; .b1; mul -1 .b0; mul -1 .b1; add .b0 .b1; mul .b0 .b1; 1; 2; 3; -1; -2
          constraints:
            - var: c0
              cal: .b0
            - var: c1
              cal: .b1
        - template: Equal 'a' .d0
          calcs: .d0
          wrongCals: add 1 $cal; add 2 $cal; add -1 $cal; add -2 $cal; mul 2 $cal; 1; 2; 4; 8
          constraints:
            - var: d0
              cal: mul .c1 .c0
    w:
      relationTex: Equal
      expressions:
        - template: Let (Equal 'y' (Frac .a0 'x')) (Restrict 'y' (Equal 'x' .a1))
          calcs: div .a0 .a1
          constraints:
            - var: a0
              min: -10
              max: 10
              excepts: 0
            - var: a1
              min: -10
              max: 10
              excepts: 0
        - template: Frac .b0 .b1
          calcs: div .b0 .b1
          wrongCals: .a0; .a1; 1; 2; 3; 4; mul -1 .a0; mul -1 .a1; mul .a0 .a1; mul -1 .a0 .a1; mul 2 .a0 .a1; mul -2 .a0 .a1; mul .a0 .a0; mul .a1 .a1; mul -1 .a0 .a0; mul -1 .a1 .a1
          constraints:
            - var: b0
              cal: .a0
            - var: b1
              cal: .a1
    v:
      relationTex: Equal
      expressions:
        - template: Let (Equal 'y' (Frac .a0 'x')) (Restrict 'x' (Equal 'y' .a1))
          calcs: div .a0 .a1
          constraints:
            - var: a0
              min: -10
              max: 10
              excepts: 0
            - var: a1
              min: -10
              max: 10
              excepts: 0
        - template: Frac .b0 .b1
          calcs: div .b0 .b1
          wrongCals: .a0; .a1; 1; 2; 3; 4; mul -1 .a0; mul -1 .a1; mul .a0 .a1; mul -1 .a0 .a1; mul 2 .a0 .a1; mul -2 .a0 .a1; mul .a0 .a0; mul .a1 .a1; mul -1 .a0 .a0; mul -1 .a1 .a1
          constraints:
            - var: b0
              cal: .a0
            - var: b1
              cal: .a1
